import unittest.main
from unittest.mock import Mock
from unittest.mock import patch
from unittest import TestCase

import os
import sys
import json

GOOGLE_MOCK = Mock()
sys.modules['google.cloud'] = GOOGLE_MOCK

import main

STOCLIENT_MOCK = Mock()

@patch.dict(os.environ, {
    "PROJECT_ID":"id", 
    "INPUT_BUCKET":"input",
    "OUTPUT_BUCKET":"output",
    "URL":"url",
    "LOCATION":"europe-west-2",
    "QUEUE":"q",
    "SAE":"servAcc",})
@patch('main.STORAGE_CLIENT', STOCLIENT_MOCK)
class TestImageReceipt(TestCase):

    def setUp(self, *args):
        # mock cloud storage functionality
        STOCLIENT_MOCK.get_bucket.return_value = STOCLIENT_MOCK
        STOCLIENT_MOCK.get_blob.return_value = STOCLIENT_MOCK
        # mapping from input filename to unique filename
        STOCLIENT_MOCK.download_as_string.return_value = json.dumps({})
        # file names currently in the image bucket
        STOCLIENT_MOCK.list_blobs.return_value = []

        # set up a way to read the HTTP message generated by the receiveImage routine
        self.return_message = ""
        def assignReturn(to_ret):
            self.return_message = to_ret
        GOOGLE_MOCK.tasks_v2beta3.HttpRequest.side_effect = \
            lambda url, oidc_token, headers, body: \
                assignReturn(json.loads(body))
        
        self.request = {"name":"file.jpg"}


    def test_successCase(self, *args):
        testCases = [
            "file.jpg",
            "file.jpeg",
            "file.png"]

        for test in testCases:
            self.request["name"] = test
            with self.subTest(test_data=test):
                st, num, l = main.receive_image(self.request, None)
                self.assertEqual(st, "Ok")
                self.assertEqual(num, 204)
                self.assertEqual(test.split(".", 1)[-1], self.return_message["name"].split(".", 1)[-1])


    def test_edgeCase_filenameInMapping(self, *args):
        STOCLIENT_MOCK.download_as_string.return_value = json.dumps({"file.jpg":"unique_name.jpg"})
        STOCLIENT_MOCK.list_blobs.return_value = ["unique_name.jpg"]
        st, num, l = main.receive_image(self.request, None)
        self.assertEqual(st, "Ok")
        self.assertEqual(num, 204)
        self.assertEqual(self.return_message["name"], "unique_name.jpg")


    # patch the uuid module to guarantee that the first ID generated is not unique
    @patch("uuid.uuid4", side_effect = ["nonunique", "unique"])
    def test_edgeCase_nonUniqueFilenameGenerated(self, *args):
        STOCLIENT_MOCK.list_blobs.return_value = ["nonunique.jpg"]
        st, num, l = main.receive_image(self.request, None)
        self.assertEqual(st, "Ok")
        self.assertEqual(num, 204)
        self.assertEqual(self.return_message["name"], "unique.jpg") 


    def test_failureCase_unsupportedFileFormat(self, *args):
        testCases = [
            "file.doc",
            "file.zip",
            "file",
            "file.jpg.zip"]

        for test in testCases:
            self.request["name"] = test
            with self.subTest(test_data=test):
                st, num, l = main.receive_image(self.request, None)
                self.assertEqual(st, "File format {} is not supported".format(test.split(".", 1)[-1]))
                self.assertEqual(num, 400)


    def test_failureCase_malformedFileInformation(self, *args):
        testCases = [
            {"name":None},
            {}]
        
        for test in testCases:
            self.request = test
            with self.subTest(test_data=test):
                st, num, l = main.receive_image(self.request, None)
                self.assertEqual(st, "name is not provided. Make sure you have \
                          property name in the request")
                self.assertEqual(num, 400)

    
if __name__ == "__main__":
    unittest.main()